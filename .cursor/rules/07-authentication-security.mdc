---
globs: src/hooks/useAuth.ts,src/store/slices/authSlice.ts,src/components/ProtectedRoute.tsx
description: Authentication and Security Guidelines
---

# 🔐 Authentication & Security Guidelines

## 🔑 Authentication Flow

### Custom Hook Pattern
```typescript
// ✅ Standard authentication hook
export const useAuth = () => {
  const { user, profile, loading, error } = useSelector((state: RootState) => state.auth)
  
  useEffect(() => {
    // Session management
    // OAuth state change handling
  }, [])
  
  return { 
    user, 
    profile, 
    loading, 
    error, 
    isAuthenticated: !!user 
  }
}
```

### Session Management
```typescript
// ✅ Session handling with error recovery
useEffect(() => {
  const getSession = async () => {
    try {
      const { data: { session }, error } = await supabase.auth.getSession()
      
      if (error) {
        console.error('세션 확인 실패:', error)
        dispatch(setUser(null))
        return
      }
      
      if (session?.user) {
        dispatch(setUser(session.user))
        dispatch(getUserProfile(session.user.id))
      } else {
        dispatch(setUser(null))
      }
    } catch (err) {
      console.error('세션 확인 에러:', err)
      dispatch(setUser(null))
    }
  }

  getSession()
}, [dispatch])
```

## 🛡️ Protected Routes

### Route Protection
```typescript
// ✅ Protected route component
<Route 
  path="/dashboard" 
  element={
    isAuthenticated ? <DashboardPage /> : <Navigate to="/login" replace />
  } 
/>

<Route 
  path="/record" 
  element={
    isAuthenticated ? <HealthRecordPage /> : <Navigate to="/login" replace />
  } 
/>

<Route 
  path="/profile" 
  element={
    isAuthenticated ? <ProfilePage /> : <Navigate to="/login" replace />
  } 
/>
```

### Loading States
```typescript
// ✅ Handle loading states in protected routes
const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated, loading } = useAuth()
  
  if (loading) {
    return (
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        minHeight: '100vh' 
      }}>
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>인증 확인 중...</Typography>
      </Box>
    )
  }
  
  return isAuthenticated ? <>{children}</> : <Navigate to="/login" replace />
}
```

## 🔄 OAuth Configuration

### Google OAuth
```typescript
// ✅ Google OAuth implementation
export const signInWithGoogle = createAsyncThunk(
  'auth/signInWithGoogle',
  async (_, { rejectWithValue }) => {
    try {
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          },
        },
      })
      
      if (error) {
        console.error('구글 로그인 실패:', error)
        return rejectWithValue(error.message)
      }
      
      return data
    } catch (error) {
      console.error('구글 로그인 오류:', error)
      return rejectWithValue('구글 로그인 중 오류가 발생했습니다.')
    }
  }
)
```

### Kakao OAuth
```typescript
// ✅ Kakao OAuth implementation
export const signInWithKakao = createAsyncThunk(
  'auth/signInWithKakao',
  async (_, { rejectWithValue }) => {
    try {
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'kakao',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`,
        },
      })
      
      if (error) {
        console.error('카카오 로그인 실패:', error)
        return rejectWithValue(error.message)
      }
      
      return data
    } catch (error) {
      console.error('카카오 로그인 오류:', error)
      return rejectWithValue('카카오 로그인 중 오류가 발생했습니다.')
    }
  }
)
```

### Email/Password Authentication
```typescript
// ✅ Email/password authentication
export const signUp = createAsyncThunk(
  'auth/signUp',
  async ({ email, password, name }: { email: string; password: string; name: string }, { rejectWithValue }) => {
    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            name,
          },
        },
      })
      
      if (error) {
        console.error('회원가입 실패:', error)
        return rejectWithValue(error.message)
      }
      
      return data
    } catch (error) {
      console.error('회원가입 오류:', error)
      return rejectWithValue('회원가입 중 오류가 발생했습니다.')
    }
  }
)

export const signIn = createAsyncThunk(
  'auth/signIn',
  async ({ email, password }: { email: string; password: string }, { rejectWithValue }) => {
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      })
      
      if (error) {
        console.error('로그인 실패:', error)
        return rejectWithValue(error.message)
      }
      
      return data
    } catch (error) {
      console.error('로그인 오류:', error)
      return rejectWithValue('로그인 중 오류가 발생했습니다.')
    }
  }
)
```

## 🔄 OAuth Callback Handling

### Callback Component
```typescript
// ✅ OAuth callback handler
const OAuthCallback: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>()
  const navigate = useNavigate()
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading')
  
  useEffect(() => {
    const handleAuthCallback = async () => {
      try {
        // Check for tokens in URL hash
        const hash = window.location.hash
        const search = window.location.search
        
        if (hash.includes('access_token') || search.includes('code')) {
          // Let Supabase handle the session
          const { data: { session }, error } = await supabase.auth.getSession()
          
          if (error) {
            console.error('OAuth 콜백 처리 실패:', error)
            setStatus('error')
            setTimeout(() => navigate('/login'), 2000)
            return
          }
          
          if (session?.user) {
            dispatch(setUser(session.user))
            dispatch(getUserProfile(session.user.id))
            setStatus('success')
            setTimeout(() => navigate('/dashboard'), 1000)
          } else {
            setStatus('error')
            setTimeout(() => navigate('/login'), 2000)
          }
        } else {
          setStatus('error')
          setTimeout(() => navigate('/login'), 2000)
        }
      } catch (error) {
        console.error('OAuth 콜백 오류:', error)
        setStatus('error')
        setTimeout(() => navigate('/login'), 2000)
      }
    }
    
    handleAuthCallback()
  }, [dispatch, navigate])
  
  return (
    <Box sx={{ 
      display: 'flex', 
      flexDirection: 'column',
      justifyContent: 'center', 
      alignItems: 'center', 
      minHeight: '100vh' 
    }}>
      {status === 'loading' && (
        <>
          <CircularProgress size={60} />
          <Typography sx={{ mt: 2 }}>로그인 처리 중...</Typography>
        </>
      )}
      {status === 'success' && (
        <>
          <CheckCircleIcon sx={{ fontSize: 60, color: 'success.main' }} />
          <Typography sx={{ mt: 2 }}>로그인 성공! 대시보드로 이동합니다...</Typography>
        </>
      )}
      {status === 'error' && (
        <>
          <ErrorIcon sx={{ fontSize: 60, color: 'error.main' }} />
          <Typography sx={{ mt: 2 }}>로그인 실패. 로그인 페이지로 이동합니다...</Typography>
        </>
      )}
    </Box>
  )
}
```

## 🚨 Error Handling

### Authentication Errors
```typescript
// ✅ Authentication error handling
const AUTH_ERROR_MESSAGES = {
  'Invalid login credentials': '이메일 또는 비밀번호가 올바르지 않습니다.',
  'Email not confirmed': '이메일 인증이 필요합니다.',
  'User already registered': '이미 등록된 이메일입니다.',
  'Password should be at least 6 characters': '비밀번호는 최소 6자 이상이어야 합니다.',
  'Invalid email': '올바른 이메일 형식이 아닙니다.',
  'Signup is disabled': '회원가입이 비활성화되어 있습니다.',
  'Email rate limit exceeded': '이메일 전송 한도를 초과했습니다. 잠시 후 다시 시도해주세요.',
  'Invalid OAuth provider': '지원하지 않는 로그인 방식입니다.',
  'OAuth account not linked': 'OAuth 계정이 연결되지 않았습니다.',
} as const

const getAuthErrorMessage = (error: string): string => {
  return AUTH_ERROR_MESSAGES[error as keyof typeof AUTH_ERROR_MESSAGES] || error
}
```

### Error Recovery
```typescript
// ✅ Error recovery patterns
const handleAuthError = (error: string, dispatch: AppDispatch) => {
  const message = getAuthErrorMessage(error)
  
  // Clear any existing errors
  dispatch(clearError())
  
  // Set new error
  dispatch(setError(message))
  
  // Auto-clear error after 5 seconds
  setTimeout(() => {
    dispatch(clearError())
  }, 5000)
}
```

## 🔒 Security Best Practices

### Input Validation
```typescript
// ✅ Input validation for authentication
const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}

const validatePassword = (password: string): { isValid: boolean; message: string } => {
  if (password.length < 6) {
    return { isValid: false, message: '비밀번호는 최소 6자 이상이어야 합니다.' }
  }
  
  if (password.length > 128) {
    return { isValid: false, message: '비밀번호는 128자 이하여야 합니다.' }
  }
  
  return { isValid: true, message: '' }
}

const validateName = (name: string): { isValid: boolean; message: string } => {
  if (name.length < 2) {
    return { isValid: false, message: '이름은 최소 2자 이상이어야 합니다.' }
  }
  
  if (name.length > 50) {
    return { isValid: false, message: '이름은 50자 이하여야 합니다.' }
  }
  
  return { isValid: true, message: '' }
}
```

### Session Security
```typescript
// ✅ Session security measures
const handleAuthStateChange = (event: string, session: Session | null) => {
  console.log('인증 상태 변화:', event, session)
  
  switch (event) {
    case 'SIGNED_IN':
      if (session?.user) {
        dispatch(setUser(session.user))
        dispatch(getUserProfile(session.user.id))
      }
      break
      
    case 'SIGNED_OUT':
      dispatch(setUser(null))
      dispatch(clearProfile())
      break
      
    case 'TOKEN_REFRESHED':
      if (session?.user) {
        dispatch(setUser(session.user))
      }
      break
      
    case 'USER_UPDATED':
      if (session?.user) {
        dispatch(setUser(session.user))
        dispatch(getUserProfile(session.user.id))
      }
      break
  }
}
```

### Logout Security
```typescript
// ✅ Secure logout implementation
export const signOut = createAsyncThunk(
  'auth/signOut',
  async (_, { rejectWithValue }) => {
    try {
      const { error } = await supabase.auth.signOut()
      
      if (error) {
        console.error('로그아웃 실패:', error)
        return rejectWithValue(error.message)
      }
      
      // Clear local state
      return null
    } catch (error) {
      console.error('로그아웃 오류:', error)
      return rejectWithValue('로그아웃 중 오류가 발생했습니다.')
    }
  }
)
```

## 🔄 Profile Management

### User Profile Updates
```typescript
// ✅ User profile management
export const updateUserProfile = createAsyncThunk(
  'auth/updateUserProfile',
  async (profileData: Partial<UserProfile>, { rejectWithValue, getState }) => {
    try {
      const state = getState() as RootState
      const userId = state.auth.user?.id
      
      if (!userId) {
        return rejectWithValue('사용자 정보를 찾을 수 없습니다.')
      }
      
      const { data, error } = await supabase
        .from('users')
        .update(profileData)
        .eq('id', userId)
        .select()
        .single()
      
      if (error) {
        console.error('프로필 업데이트 실패:', error)
        return rejectWithValue(error.message)
      }
      
      return data
    } catch (error) {
      console.error('프로필 업데이트 오류:', error)
      return rejectWithValue('프로필 업데이트 중 오류가 발생했습니다.')
    }
  }
)
```

### Profile Data Fetching
```typescript
// ✅ Fetch user profile data
export const getUserProfile = createAsyncThunk(
  'auth/getUserProfile',
  async (userId: string, { rejectWithValue }) => {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .single()
      
      if (error) {
        console.error('프로필 조회 실패:', error)
        return rejectWithValue(error.message)
      }
      
      return data
    } catch (error) {
      console.error('프로필 조회 오류:', error)
      return rejectWithValue('프로필 조회 중 오류가 발생했습니다.')
    }
  }
)
```

## 🧪 Testing Authentication

### Mock Authentication
```typescript
// ✅ Mock authentication for testing
export const createMockAuthState = (overrides: Partial<AuthState> = {}): AuthState => ({
  user: null,
  profile: null,
  loading: false,
  error: null,
  ...overrides
})

export const createMockUser = (overrides: Partial<User> = {}): User => ({
  id: 'test-user-id',
  email: 'test@example.com',
  created_at: new Date().toISOString(),
  updated_at: new Date().toISOString(),
  ...overrides
} as User)
```

### Authentication Test Utilities
```typescript
// ✅ Authentication test utilities
export const renderWithAuth = (component: React.ReactElement, authState: AuthState) => {
  const store = createMockStore({ auth: authState })
  
  return render(
    <Provider store={store}>
      <Router>
        {component}
      </Router>
    </Provider>
  )
}
```