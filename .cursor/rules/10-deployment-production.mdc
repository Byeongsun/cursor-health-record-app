---
globs: *.json,*.js,*.ts,*.md
description: Deployment and Production Guidelines
---

# 🚀 Deployment & Production Guidelines

## 🏗️ Build Configuration

### Vite Build Setup
```typescript
// ✅ vite.config.ts - Production build configuration
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { resolve } from 'path'

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'dist',
    sourcemap: false, // Disable sourcemaps in production
    minify: 'terser',
    terserOptions: {
      compress: {
        drop_console: true, // Remove console.log in production
        drop_debugger: true
      }
    },
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          mui: ['@mui/material', '@mui/icons-material'],
          redux: ['@reduxjs/toolkit', 'react-redux'],
          supabase: ['@supabase/supabase-js']
        }
      }
    }
  },
  resolve: {
    alias: {
      '@': resolve(__dirname, 'src')
    }
  }
})
```

### Environment Configuration
```typescript
// ✅ Environment variables setup
// .env.production
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your-anon-key
VITE_APP_VERSION=1.0.0
VITE_APP_NAME=Health Record App

// .env.development
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your-anon-key
VITE_APP_VERSION=1.0.0-dev
VITE_APP_NAME=Health Record App (Dev)
```

## 📦 Package.json Scripts

### Production Scripts
```json
{
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "build:analyze": "tsc -b && vite build --mode analyze",
    "preview": "vite preview",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint . --ext ts,tsx --fix",
    "type-check": "tsc --noEmit",
    "test": "jest",
    "test:coverage": "jest --coverage",
    "test:e2e": "playwright test",
    "deploy": "npm run build && npm run deploy:upload",
    "deploy:upload": "echo 'Upload to your hosting service'"
  }
}
```

## 🌐 Deployment Strategies

### Static Hosting (Vercel)
```json
// ✅ vercel.json configuration
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": {
        "distDir": "dist"
      }
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "/index.html"
    }
  ],
  "env": {
    "VITE_SUPABASE_URL": "@supabase-url",
    "VITE_SUPABASE_ANON_KEY": "@supabase-anon-key"
  }
}
```

### Static Hosting (Netlify)
```toml
# ✅ netlify.toml configuration
[build]
  command = "npm run build"
  publish = "dist"

[build.environment]
  NODE_VERSION = "18"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[context.production.environment]
  VITE_SUPABASE_URL = "https://your-project.supabase.co"
  VITE_SUPABASE_ANON_KEY = "your-anon-key"
```

### Docker Deployment
```dockerfile
# ✅ Dockerfile for containerized deployment
FROM node:18-alpine AS builder

WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

```nginx
# ✅ nginx.conf for production
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Handle client-side routing
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    }
}
```

## 🔒 Security Configuration

### Content Security Policy
```html
<!-- ✅ index.html - Security headers -->
<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="Content-Security-Policy" 
        content="default-src 'self'; 
                 script-src 'self' 'unsafe-inline' 'unsafe-eval'; 
                 style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; 
                 font-src 'self' https://fonts.gstatic.com; 
                 img-src 'self' data: https:; 
                 connect-src 'self' https://*.supabase.co wss://*.supabase.co;" />
  <title>Health Record App</title>
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/src/main.tsx"></script>
</body>
</html>
```

### Environment Security
```typescript
// ✅ Environment validation
const validateEnvironment = () => {
  const requiredEnvVars = [
    'VITE_SUPABASE_URL',
    'VITE_SUPABASE_ANON_KEY'
  ]

  const missingVars = requiredEnvVars.filter(varName => !import.meta.env[varName])
  
  if (missingVars.length > 0) {
    throw new Error(`Missing required environment variables: ${missingVars.join(', ')}`)
  }
}

// Validate on app startup
if (import.meta.env.PROD) {
  validateEnvironment()
}
```

## 📊 Performance Optimization

### Bundle Analysis
```typescript
// ✅ Bundle analyzer configuration
import { defineConfig } from 'vite'
import { visualizer } from 'rollup-plugin-visualizer'

export default defineConfig({
  plugins: [
    react(),
    visualizer({
      filename: 'dist/stats.html',
      open: true,
      gzipSize: true,
      brotliSize: true
    })
  ]
})
```

### Performance Monitoring
```typescript
// ✅ Performance monitoring
export const performanceMonitor = {
  measurePageLoad: () => {
    if (import.meta.env.PROD) {
      window.addEventListener('load', () => {
        const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart
        console.log(`Page load time: ${loadTime}ms`)
        
        // Send to analytics
        if (window.gtag) {
          window.gtag('event', 'page_load_time', {
            value: loadTime
          })
        }
      })
    }
  },

  measureUserInteraction: (action: string, startTime: number) => {
    if (import.meta.env.PROD) {
      const duration = performance.now() - startTime
      console.log(`${action} took ${duration}ms`)
      
      // Send to analytics
      if (window.gtag) {
        window.gtag('event', 'user_interaction', {
          action,
          duration
        })
      }
    }
  }
}
```

## 🔍 Error Monitoring

### Error Boundary
```typescript
// ✅ Production error boundary
import React from 'react'
import { Alert, Box, Button, Typography } from '@mui/material'

interface ErrorBoundaryState {
  hasError: boolean
  error?: Error
}

export class ErrorBoundary extends React.Component<
  React.PropsWithChildren<{}>,
  ErrorBoundaryState
> {
  constructor(props: React.PropsWithChildren<{}>) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    if (import.meta.env.PROD) {
      // Send error to monitoring service
      console.error('Error caught by boundary:', error, errorInfo)
      
      // Example: Send to Sentry, LogRocket, etc.
      // Sentry.captureException(error, { extra: errorInfo })
    }
  }

  render() {
    if (this.state.hasError) {
      return (
        <Box sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h5" gutterBottom>
            😔 문제가 발생했습니다
          </Typography>
          <Typography variant="body1" sx={{ mb: 3 }}>
            예상치 못한 오류가 발생했습니다. 페이지를 새로고침해주세요.
          </Typography>
          <Button
            variant="contained"
            onClick={() => window.location.reload()}
          >
            페이지 새로고침
          </Button>
        </Box>
      )
    }

    return this.props.children
  }
}
```

### Error Reporting
```typescript
// ✅ Error reporting service
export const errorReporter = {
  reportError: (error: Error, context?: any) => {
    if (import.meta.env.PROD) {
      const errorData = {
        message: error.message,
        stack: error.stack,
        context,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        url: window.location.href
      }

      // Send to error monitoring service
      fetch('/api/errors', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(errorData)
      }).catch(console.error)
    }
  }
}
```

## 📈 Analytics & Monitoring

### Google Analytics
```typescript
// ✅ Google Analytics integration
declare global {
  interface Window {
    gtag: (...args: any[]) => void
  }
}

export const analytics = {
  trackPageView: (page: string) => {
    if (import.meta.env.PROD && window.gtag) {
      window.gtag('config', 'GA_MEASUREMENT_ID', {
        page_title: page,
        page_location: window.location.href
      })
    }
  },

  trackEvent: (action: string, category: string, label?: string, value?: number) => {
    if (import.meta.env.PROD && window.gtag) {
      window.gtag('event', action, {
        event_category: category,
        event_label: label,
        value: value
      })
    }
  },

  trackHealthRecord: (recordType: string) => {
    analytics.trackEvent('health_record_created', 'Health', recordType)
  },

  trackLogin: (method: string) => {
    analytics.trackEvent('login', 'Authentication', method)
  }
}
```

## 🔄 CI/CD Pipeline

### GitHub Actions
```yaml
# ✅ .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci
      - run: npm run lint
      - run: npm run type-check
      - run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci
      - run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./
```

## 📋 Pre-deployment Checklist

### Production Readiness
```markdown
## ✅ Pre-deployment Checklist

### Code Quality
- [ ] All tests passing
- [ ] TypeScript compilation successful
- [ ] ESLint warnings resolved
- [ ] Code coverage meets threshold (80%)
- [ ] No console.log statements in production code

### Security
- [ ] Environment variables properly configured
- [ ] Content Security Policy implemented
- [ ] HTTPS enabled
- [ ] Sensitive data not exposed in client code
- [ ] Supabase RLS policies configured

### Performance
- [ ] Bundle size optimized
- [ ] Images compressed
- [ ] Lazy loading implemented
- [ ] Caching headers configured
- [ ] Gzip compression enabled

### Functionality
- [ ] All features working in production build
- [ ] Error boundaries implemented
- [ ] Loading states handled
- [ ] Offline functionality tested
- [ ] Cross-browser compatibility verified

### Monitoring
- [ ] Error tracking configured
- [ ] Analytics implemented
- [ ] Performance monitoring active
- [ ] Health checks configured
- [ ] Logging configured
```

## 🚀 Deployment Commands

### Manual Deployment
```bash
# ✅ Production deployment commands
npm run build                    # Build for production
npm run type-check              # Verify TypeScript
npm run test:coverage           # Run tests with coverage
npm run lint                    # Check code quality

# Deploy to Vercel
vercel --prod

# Deploy to Netlify
netlify deploy --prod --dir=dist

# Deploy to AWS S3
aws s3 sync dist/ s3://your-bucket-name --delete
```

### Automated Deployment
```bash
# ✅ Automated deployment script
#!/bin/bash
set -e

echo "🚀 Starting deployment process..."

# Run tests
echo "🧪 Running tests..."
npm run test:coverage

# Build application
echo "🏗️ Building application..."
npm run build

# Deploy to production
echo "🚀 Deploying to production..."
npm run deploy

echo "✅ Deployment completed successfully!"
```

## 📊 Post-deployment Monitoring

### Health Checks
```typescript
// ✅ Health check endpoint
export const healthCheck = {
  checkDatabase: async () => {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('count')
        .limit(1)
      
      return { status: error ? 'error' : 'ok', error }
    } catch (error) {
      return { status: 'error', error }
    }
  },

  checkAuth: async () => {
    try {
      const { data: { session } } = await supabase.auth.getSession()
      return { status: 'ok', authenticated: !!session }
    } catch (error) {
      return { status: 'error', error }
    }
  }
}
```

### Performance Metrics
```typescript
// ✅ Performance metrics collection
export const performanceMetrics = {
  collectMetrics: () => {
    if (import.meta.env.PROD) {
      const metrics = {
        loadTime: performance.timing.loadEventEnd - performance.timing.navigationStart,
        domContentLoaded: performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart,
        firstPaint: performance.getEntriesByType('paint')[0]?.startTime,
        memoryUsage: (performance as any).memory?.usedJSHeapSize
      }
      
      // Send metrics to monitoring service
      console.log('Performance metrics:', metrics)
    }
  }
}
```